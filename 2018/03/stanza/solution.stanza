defpackage solution :
    import core
    import collections
    import advent-of-code
    import io



;; -----------------------------------------------------------------------------
;; Main


run $ get-mode()


defn setup-grid () :
    val grid = Grid(1000, 1000)
    val lines = get-lines()
    val claims = map(parse-claim, lines)
    for c in claims do :
        apply-claim(grid, c)
    [grid, claims]


defmethod run (m:PartOneMode) :
    val [grid, _] = setup-grid()
    println $ conflict-count(grid)


defmethod run (m:PartTwoMode) :
    val [grid, claims] = setup-grid()
    var ids = to-vector<Int> $ map({id(_)}, claims)
    for c in cells(grid) do :
        if in-conflict?(c) :
            for id in claim-ids(c) do :
                remove-item(ids, id)
    println $ ids[0]



;; -----------------------------------------------------------------------------
;; Grid

deftype Grid

defmulti width (g:Grid) -> Int
defmulti height (g:Grid) -> Int
defmulti get-cell (g:Grid, x:Int, y:Int) -> Cell
defmulti claim (g:Grid, x:Int, y:Int, id:Int) -> False
defmulti conflict-count (g:Grid) -> Int
defmulti cells (g:Grid) -> Seq<Cell>


defn Grid (width:Int, height:Int) -> Grid :
    val size = width * height
    val cells = Array<Cell>(size)
    for i in 0 to size do :
        cells[i] = Cell()
    new Grid :
        defmethod width (this) :
            width
        defmethod height (this) :
            height
        defmethod get-cell (this, x:Int, y:Int) :
            val i = x + (y * height)
            cells[i]
        defmethod claim (this, x:Int, y:Int, id:Int) :
            val cell = get-cell(this, x, y)
            claim(cell, id)
        defmethod conflict-count (this) :
            for c in cells count :
                in-conflict?(c)
        defmethod cells (this) :
            to-seq(cells)


defn apply-claim (g:Grid, c:Claim) :
    val square-x = left(c)
    val square-y = top(c)
    val width = width(c)
    val height = height(c)
    var x = square-x
    var y = square-y
    while x < (square-x + width) and y < (square-y + height) :
        claim(g, x, y, id(c))
        x = x + 1
        if x == (square-x + width) :
            x = square-x
            y = y + 1


defmethod print (os:OutputStream, g:Grid) :
    var x = 0
    var y = 0
    while x < width(g) and y < height(g) :
        val cell = get-cell(g, x, y)
        print(os, cell)
        x = x + 1
        if x == width(g) :
            print(os, "\n")
            x = 0
            y = y + 1
        else :
            print(" ")



;; -----------------------------------------------------------------------------
;; Cell

deftype Cell

defmulti claim (c:Cell, id:Int)
defmulti claim-ids (c:Cell) -> Seq<Int>
defmulti in-conflict? (c:Cell) -> True|False


defn Cell () -> Cell :
    var claim-count = 0
    var claim-ids = Vector<Int>()

    defn mark () -> String :
        switch {claim-count >= _} :
            2 : "x"
            1 : "#"
            else : "."

    new Cell :
        defmethod claim (this, id:Int) :
            claim-count = claim-count + 1
            add(claim-ids, id)
        defmethod claim-ids (this) :
            to-seq(claim-ids)
        defmethod in-conflict? (this) :
            claim-count >= 2
        defmethod print (os:OutputStream, this) :
            print(os, mark())



;; -----------------------------------------------------------------------------
;; Claim

defstruct Claim :
    id: Int
    left: Int
    top: Int
    width: Int
    height: Int
    conflicts?: True|False with: (setter => set-conflicts)


defmethod print (os:OutputStream, c:Claim) :
    print("\n")
    println(os, "Claim(")
    println(os, " id=%_" % [id(c)])
    println(os, " left=%_" % [left(c)])
    println(os, " top=%_" % [top(c)])
    println(os, " width=%_" % [width(c)])
    println(os, " height=%_" % [height(c)])
    println(os, " conflicts?=%_" % [conflicts?(c)])
    println(os, ")")


defn not-digit? (c:Char) -> True|False :
    not digit?(c)


defn to-int! (s:String) -> Int :
    val n = to-int(s)
    match(n) :
        (_:False) : fatal("Couldn't convert '%_' to an int" % [s])
        (n:Int) : n


defn parse-claim (s:String) -> Claim :
    val words = split(s, " ")
    val id = parse-id $ next(words)
    next(words)  ; Skip '@'
    val [left, top] = parse-position $ next(words)
    val [width, height] = parse-size $ next(words)
    Claim(id, left, top, width, height, false)


defn parse-id (s:String) -> Int :
    to-int! $ trim(not-digit?, s)


defn parse-position (s:String) -> [Int, Int] :
    val parts = to-list $ split{_, ","} $ trim(not-digit?, s)
    val pos = to-tuple $ map(to-int!, parts)
    [pos[0], pos[1]]


defn parse-size (s:String) -> [Int, Int] :
    val parts = to-list $ split(s, "x")
    val size = to-tuple $ map(to-int!, parts)
    [size[0], size[1]]
