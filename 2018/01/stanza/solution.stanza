defpackage solution :
    import core
    import collections
    import io
    import log
    import seq



;; -----------------------------------------------------------------------------
;; Argument parsing


deftype Mode
deftype UnknownMode <: Mode
deftype SumMode <: Mode
deftype RepeatMode <: Mode


defn get-mode () -> Mode :
    val args = command-line-arguments()
    val non-flags = to-array<String> $ for arg in args filter :
        not prefix?(arg, "-")

    if length(non-flags) != 2 :
        new UnknownMode
    else :
        val mode = get(non-flags, 1)
        switch {mode == _} :
            "sum" : new SumMode
            "repeat" : new RepeatMode
            else : new UnknownMode


defn get-binary-name () -> String :
    val args = command-line-arguments()
    get(args, 0)



;; -----------------------------------------------------------------------------
;; I/O


defn get-numbers () -> Vector<Int> :
    val numbers = Vector<Int>()
    var n = get-number()
    while n != false :
        add(numbers, n as Int)
        n = get-number()
    numbers



;; -----------------------------------------------------------------------------
;; Solutions


defn show-usage () :
    println("Usage: %_ [-v|--verbose] sum|repeat" % [get-binary-name()])


defn sum-frequencies () :
    println $ sum-numbers()


defn sum-numbers () -> Int :
    sum $ get-numbers()


defn find-first-repeated-sum () :
    println $ first-repeated-sum()


defn first-repeated-sum () -> Int :
    val numbers = get-numbers()
    val sums-so-far = HashTable<Int, Int>()
    var sum = 0
    label<Int> return :
        for n in repeat-forever(numbers) do :
            ;; Add initial zero sum because example shows it counts
            set(sums-so-far, sum, 0)
            log("n=%_ sum=%_" % [n, sum])
            sum = sum + n
            if key?(sums-so-far, sum) :
                return(sum)
        fatal("Unreachable (infinite sequence ended)")



;; -----------------------------------------------------------------------------
;; Main


;; TODO[TRS,2018-12-11]
;; Make this more OO by giving each Mode object a run() method, calling that
;; here, and trusting each object to do the right thing.

match(get-mode()) :
    (mode:UnknownMode) : show-usage()
    (mode:SumMode) : sum-frequencies()
    (mode:RepeatMode) : find-first-repeated-sum()
