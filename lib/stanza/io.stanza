;; io.stanza -- I/O Utilities
;;
;; This package provides features for reading and writing input/output.

defpackage io :
    import core
    import collections



public defn get-char () -> Char|False :
    get-char(STANDARD-INPUT-STREAM)


public defn each-line () -> Seq<String> :
    repeat-while $ fn () :
        match(get-line()) :
            (_:False) : None()
            (line:String) : One(line)


public defn get-line () -> String|False :
    var line = StringBuffer()

    defn* loop () :
        match(get-char()) :
            (c:Char) :
                if c != '\n' :
                    add(line, c)
                    loop()
            (_:False) :
                false

    loop()
    false when empty?(line) else to-string(line)


public defn get-lines () -> List<String> :
    to-list $ repeat-while{_} $ fn () :
        val line = get-line()
        if line == false :
            None()
        else:
            One(line as String)


public defn get-number () -> Int|False :
    val sign = get-char()
    val line = get-line()
    val num = match(line) :
        (line:False) : false
        (line:String) : to-int(line)
    match(num) :
        (num:False) : false
        (num:Int) : (num * -1) when sign == '-' else num


public defn skip (s:Seq<Char>, count:Int) -> False :
    for _ in 0 to count do :
        next(s)


public defn next-int (s:Seq<Char>) -> Int :
    var n:Int = 0
    while digit?(peek(s)) :
        val d = to-int(to-byte(next(s)) - to-byte('0'))
        n = n * 10
        n = n + d
    n
