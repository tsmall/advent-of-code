# Built and tested against Inko v0.8.1

import std::fs::file::(self, ReadOnlyFile)
import std::io::(Error as IOError)
import std::stdio::stdout


impl ReadOnlyFile {
  def each_char(block: do (Integer)) !! IOError {
    let bytes = ByteArray.new
    let mut bytes_read = try! self.read_bytes(bytes, 1)
    { bytes_read == 1 }.while_true {
      let char = bytes[0]
      char.if_true {
        block.call(char!)
      }

      bytes.clear
      bytes_read = try self.read_bytes(bytes, 1)
    }
  }
}


let UP_COMMAND = '('.byte(0)
let DOWN_COMMAND = ')'.byte(0)


object Elevator {
  @floor: Integer

  def init {
    @floor = 0
  }

  def floor -> Integer {
    @floor
  }

  def follow(command: Integer) {
    (command == UP_COMMAND).if_true {
      @floor += 1
      return
    }

    (command == DOWN_COMMAND).if_true {
      @floor -= 1
    }
  }
}


let input = try! file.read_only('chars.txt')

let elevator = Elevator.new
try! input.each_char do (command) {
  elevator.follow(command)
}

stdout.print('Part 1: ' + elevator.floor.to_string)
